--[[
	This script handles the serialization of data using the marshal library and the saving of this data to disk depending
	on save game name. What this means is that you can save entire tables to disk instead of saving to object packet.
	This script was created to alleviate issues with using packets to save dynamic data (pstor) which lead to save corruption.
	Also it removes some restrictions on what you can save.
	
	*only store valid lua types such as numbers, strings, boolean, functions or tables that contain these valid types. Userdata needs to have a special
	__persist function defined in it's metatable. See how it is done for CTime in _G.script
	
	*Supposedly you can save userdata if you write a proper __persist method for the metatable but I have failed to achieve proper results with serializing CTime.
	
	*You must register for 'save_state' and 'load_state' and add your own table to m_data for it to be encoded then stored in *.scoc
	*Although marshal is pretty fast, keep in mind that encoding/decoding a ton of data, saves will start to noticeablely take longer to save/load.
	*For testing/debugging you can uncomment the print_table calls in save_state and load_state. It will save the before and after tables to print_table.txt in your main directory.
		
	
	by: Alundaio
--]]
local m_data = {}
m_data.se_stalker = {}

local function on_pstor_load_all(obj,packet)
	local id = obj:id()
	if (m_data.pstor_all and m_data.pstor_all[id]) then 
		db.storage[id].pstor = m_data.pstor_all[id]
		m_data.pstor_all[id] = nil
	end 

	if (m_data.pstor_ctime and m_data.pstor_ctime[id]) then
		db.storage[id].pstor_ctime = m_data.pstor_ctime[id]
		m_data.pstor_ctime[id] = nil
	end 
end

function on_game_start()
	if not (USE_MARSHAL) then 
		return 
	end
	RegisterScriptCallback("on_pstor_load_all",on_pstor_load_all)
end

-- called from engine!
function CALifeStorageManager_before_save(fname)
	local sim = alife()
	local se_obj
	for i=1,65534 do
		se_obj = sim:object(i)
		if (se_obj and se_obj:clsid() == clsid.phantom) then
			--printf("release phantom")
			sim:release(se_obj,true)
		end
	end
	
	if not (USE_MARSHAL) then 
		return 
	end

	m_data.GAME_VERSION = GAME_VERSION
	
	SendScriptCallback("save_state",m_data)
	
	-- save pstor
	m_data.pstor_all = {}
	m_data.pstor_ctime = {}
	for id,t in pairs(db.storage) do
		if (t and type(t) == "table") then
			if (t.pstor) then
				if not (empty(t.pstor)) then
					m_data.pstor_all[id] = t.pstor
				end
			end
	
			-- serialization with game.CTime.__persist
			if (t.pstor_ctime) then
				if not (empty(t.pstor_ctime)) then
					m_data.pstor_ctime[id] = t.pstor_ctime
				end
			end
		end
	end
	
	--ProcessEventQueueState(m_data,true)
	
	-- clean out se_stalker table of empty tables
	for k,v in pairs(m_data.se_stalker) do 
		if (empty(v)) then 
			v = nil 
		end
	end
	
	local data = marshal.encode(m_data)
	if not (data) then 
		return 
	end
		
	local path = getFS():update_path('$game_saves$', '') .. fname:sub(0,-6):lower() .. ".scoc"
	local savegame = io.open(path,"wb+")
	if not (savegame) then
		return 
	end
	
	printf("axr_main: saving custom data %s",path)
	savegame:write(data)
	savegame:close()
end 

-- called from engine!
function CALifeStorageManager_save(fname)

end 

-- called from engine
function CALifeStorageManager_load(fname)
	if not (USE_MARSHAL) then 
		return 
	end 

	local path = fname:sub(0,-6) .. ".scoc"
	
	--alun_utils.debug_write(strformat("CALifeStorageManager_load %s",path))
	
	local savegame = io.open(path,"rb+")
	if not (savegame) then
		return
	end

	local data = savegame:read("*all")
	savegame:close()

	if not (data) then
		error("Failed to read %s",path)
		return
	end

	m_data = marshal.decode(data)
	
	--ProcessEventQueueState(m_data,false)
	
	-- For debugging save state
	--alun_utils.print_table(m_data,"m_data_on_load ("..path..")")

	SendScriptCallback("load_state",m_data)
end

function get_state()
	return m_data
end

function decode(t)
	return marshal.decode(t)
end