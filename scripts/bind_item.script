function bind(obj)
    obj:bind_object(item_binder(obj))
end
--------------------------------------------------------------------------------
-- Class "item_binder"
--------------------------------------------------------------------------------
class "item_binder" (object_binder)
-- Class constructor
function item_binder:__init(obj) super(obj)

end
-- Class update
function item_binder:update(delta)
    object_binder.update(self, delta)
	
	if self.first_call == true then
		self.first_call = false
		
		local se_obj = alife_object(self.object:id())
		if (se_obj) then
			local m_data = alife_storage_manager.get_se_obj_state(se_obj)
			if (m_data and m_data.offline_condition) then
				self.object:set_condition(tonumber(m_data.offline_condition) or 0.9999999)
				m_data.offline_condition = nil
			end
		end
	end
end
-- Reload object
function item_binder:reload(section)
    object_binder.reload(self, section)
end
-- Reinitialize object
function item_binder:reinit()
    object_binder.reinit(self)
end
-- Net spawn
function item_binder:net_spawn(sobject)
    if not(object_binder.net_spawn(self, sobject)) then
        return false
    end
	
	self.first_call = true
    return true
end
-- Net destroy
function item_binder:net_destroy()
	object_binder.net_destroy(self)
end
-- Save
function item_binder:save(stpk)
	object_binder.save(self, stpk)
	local se_obj = alife_object(self.object:id())
	if (se_obj) then
		local m_data = alife_storage_manager.get_se_obj_state(se_obj)
		if (m_data) then 
			m_data.offline_condition = self.object:condition()
		end
	end
end
-- Load
function item_binder:load(stpk)
	object_binder.load(self, stpk)
end