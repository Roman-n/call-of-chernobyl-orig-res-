-- Extensions to Game Options


--- IMPORTANT! SEE opt_menu_on_init to add a new game options (new as of 5/28/2016)

function opt_menu_on_init(menu)
	-- simply add new line and a ui_mm_<name> in ui_st_mm.xml to create a new option. Script automatically does the rest for you
	-- debug_hud
	menu.gameplay_options["debug_hud"]			= {default=false, 	debug_only=true, 	typ="check"}
	-- show_enemy_health
	menu.gameplay_options["show_enemy_health"]	= {default=false, 	debug_only=true, 	typ="check"}
	-- radio_mod
	menu.gameplay_options["radio_mod"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- mechanic_feature
	menu.gameplay_options["mechanic_feature"]	= {default=false, 	debug_only=false, 	typ="check"}
	-- heli_engine_sound
	menu.gameplay_options["heli_engine_sound"]	= {default=true, 	debug_only=false, 	typ="check"}
	-- heli_spawn
	menu.gameplay_options["heli_spawn"]			= {default=true, 	debug_only=false, 	typ="check"}
	-- dynamic_news
	menu.gameplay_options["dynamic_news"]		= {default=true, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and dynamic_news_manager) then 
			if (ctrl:GetCheck()) then 
				dynamic_news_manager.get_dynamic_news()
			else
				dynamic_news_manager.destroy_dynamic_news()
			end
		end	
	end}
	-- sleep_deprived
	menu.gameplay_options["sleep_deprived"]		= {default=false, 	debug_only=false, 	typ="check", on_accept=function(handler,optMgr,ctrl)
		if (level.present() and sleep_dep) then
			if (ctrl:GetCheck()) then
				sleep_dep.create()
			else 
				sleep_dep.destroy()
			end
		end
	end}
	-- excl_dist
	menu.gameplay_options["excl_dist"]			= {default=30, 		debug_only=false, 	typ="list", list={0,50,100,150,200}}
	
	-- quicksave_cnt
	menu.gameplay_options["quicksave_cnt"]		= {default=5, 		debug_only=false, 	typ="list", list={1,5,10,20}}
	
	if (db.actor) then -- Options will only show while in-game
		local l = ui_mm_faction_select.get_icon_list()
		local selected = nil 
		
		menu.gameplay_options["char_portrait"]	= {default=db.actor_binder.character_icon or l[1], debug_only=false, typ="list", list=l, 
			on_accept=function(handler,optMgr,ctrl)
				if (selected) then
					db.actor_binder.character_icon = ctrl:GetText()
					db.actor:set_character_icon(db.actor_binder.character_icon)
				end
			end, 
			on_list_item_select=function(handler,ctrl)
				selected = ctrl:GetText()
				if (handler.char_icon) then
					handler.char_icon:InitTexture(selected)
				end
			end
		}
		
		--[[ It works, just doesn't have character_icon set for all outfits yet
		menu.gameplay_options["outfit_portrait"]	= {default=false, 	debug_only=false, 	typ="check", 
			on_accept=function(handler,optMgr,ctrl)
				if (ctrl:GetCheck()) then
					local outfit = db.actor:item_in_slot(7)
					if (outfit) then 
						local icon = system_ini():r_string_ex(outfit:section(),"character_icon")
						if (icon) then 
							db.actor:set_character_icon(icon)
						end
					end
				else 
					db.actor:set_character_icon(db.actor_binder.character_icon)
				end
			end
		}
		--]]
	end 
	
    -- axr option default config
    local need_save

    for k,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				if not (axr_main.config:KeyExist("mm_options","enable_"..k)) then
					axr_main.config:SetValue("mm_options","enable_"..k,v.default)
					need_save = true
				end
			elseif not (axr_main.config:KeyExist("mm_options",k)) then
				axr_main.config:SetValue("mm_options",k,v.default)
				need_save = true
			end
		end
    end
 
    if (need_save) then
        axr_main.config:Save()
    end
end

function opt_menu_on_accept(menu,optMgr,console)
    for name,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				axr_main.config:SetValue("mm_options","enable_"..name,v.ctrl:GetCheck())
			elseif (v.typ=="list") then 
				axr_main.config:SetValue("mm_options",name,v.ctrl:GetText())
			end
			
			if (v.on_accept) then 
				v.on_accept(menu,optMgr,v.ctrl)
			end
		end
    end
    axr_main.config:Save()
end

function opt_menu_on_set_values(menu,optMgr)
    for name,v in pairs(menu.gameplay_options) do
		if (v.default ~= nil) then
			if (v.typ=="check") then
				v.ctrl:SetCheck(axr_main.config:GetValue("mm_options","enable_"..name,1,v.default))
			elseif (v.typ=="list") then 
				v.ctrl:SetText(axr_main.config:GetValue("mm_options",name,0,v.default))
				--v.ctrl:SetText(v.ctrl:GetTextOf(0))
			end
			
			if (v.on_set_values) then 
				v.on_set_values(menu,optMgr,v.ctrl)
			end
		end
    end
end