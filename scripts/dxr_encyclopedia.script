--------------------------------
----- Written by Darryl123 -----
--------------------------------

--------------------------
----- Initialisation -----
--------------------------

-- Initialises callbacks for interactivity plugin.
function on_game_start()
	-- Entering a vehicle.
	RegisterScriptCallback("actor_on_attach_vehicle", detect_vehicle_interaction)
	
	-- Talking-to or looting a character.
	RegisterScriptCallback("actor_on_leave_dialog", detect_character_interaction)
	RegisterScriptCallback("actor_menu_mode_changed", detect_character_interaction2)
	
	-- Using or equipping items.
	RegisterScriptCallback("actor_on_item_use", detect_item_interaction)
	RegisterScriptCallback("actor_item_to_slot", detect_item_interaction)
end

-------------------------
----- Interactivity -----
-------------------------

-- Generic method to save having to repeat code.
function create_interaction(key, section)
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local interactivity = guide.interactivity or {}
	if (key and section and interactivity[key] and interactivity[key][section]) then
		for k, v in pairs(interactivity[key][section]) do
			unlock_article(v)
		end
	end
end

-- Character and faction articles for closing a dialog.
function detect_character_interaction(character_id)
	local character = level.object_by_id(character_id)
	create_interaction("factions", character_community(character))
	create_interaction("characters", character and character:section() or nil)
end

-- Character and faction articles for looting a dead stalker.
function detect_character_interaction2(mode, last_mode)
	if (last_mode ~= 4) then 
		return 
	end
	local character = ActorMenu.get_actor_menu():GetPartner()
	if (not character or character:alive()) then return end
	create_interaction("factions", character_community(character))
	create_interaction("characters", character and character:section() or nil)
end

-- Item articles for using or moving to slot.
function detect_item_interaction(item)
	create_interaction("items", item:section())
end

-- Mutant articles for field-dressing them.
-- Called directly from mutant looting method.
function detect_mutant_interaction(mutant)
	create_interaction("mutants", mutant)
end

-- Smart terrains and level articles for entering.
-- Called directly from smart terrain update method.
function detect_smart_interaction(smart)
	create_interaction("levels", level.name())
	create_interaction("smarts", smart:name())
end

-- Vehicle articles for entering.
function detect_vehicle_interaction(vehicle)
	create_interaction("vehicles", vehicle:section())
end

---------------------------
----- Context Options -----
---------------------------

-- Action performed by USB memory sticks.
function context_action_functor(item)
	local item_object = alife_object(item:id())
	alife():release(item_object, true)
	unlock_article()
end

-- Text displayed for USB memory sticks.
function context_functor(item)
	-- Return if the item is not in the player inventory.
	local parent = item:parent()
	if not (parent and parent:id() == db.actor:id()) then
		return
	end
	
	-- Return if there are no articles to unlock.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local locked_articles = guide.locked_articles or {}
	if (get_articles_locked_count() == 0) then
		return
	end
	
	-- Return the context option to detach a sight.
	return game.translate_string("ui_inv_download")
end

----------------------
----- Statistics -----
----------------------

-- Counts how many articles currently exist.
function get_articles_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	return guide.articles_count
end

-- Counts how many articles are locked.
function get_articles_locked_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	return guide.articles_locked_count
end

-- Counts how many articles are unlocked.
function get_articles_unlocked_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	return guide.articles_unlocked_count
end

--------------------------------
----- Article Manipulation -----
--------------------------------

-- Jumps straight to a specific article.
-- Also returns the category and article indices.
function set_article(section, unlocking)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Return if no section exists.
	if not (section) then
		return
	end
	
	-- Discover the category of the article.
	local article = nil
	local category = nil
	for index_c = 1, #guide.categories do
		category = guide.categories[index_c]
		-- Determine if the article is in this category.
		if (category) then
			for index_a = 1, #category.articles do
				article = category.articles[index_a]
				-- Set the category and article if correct.
				if (article and article == section) then
					guide:SelectCategory(index_c)
					guide:SelectArticle(index_a)
					return index_a, index_c
				end
			end
		end
	end
end

-- Unlocks an article for the player.
-- A random one will be chosen if none is specified.
function unlock_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Instance of the locked and unlocked article tables.
	local locked_articles = guide.locked_articles or {}
	local unlocked_articles = xr_statistic.actor_statistic.guide_articles
	
	-- Return if all articles have been unlocked.
	if (get_articles_locked_count() == 0) then
		return
	end
	
	-- Return if the specified article is already unlocked or doesn't exist.
	if (section) then
		if (unlocked_articles[section]) then
			return
		elseif (not locked_articles[section]) then
			return
		end
		
	-- Should no article be specified select one at random to unlock.
	else
		local index = 1
		local selection = math.random(get_articles_locked_count())
		for k, v in pairs(locked_articles) do
			if (index == selection) then
				section = k
				break
			end
			index = index + 1
		end
	end
	
	-- Update the required tables.
	locked_articles[section] = nil
	unlocked_articles[section] = true
	
	-- Update the required counters.
	guide.articles_locked_count = guide.articles_locked_count - 1
	guide.articles_unlocked_count = guide.articles_unlocked_count + 1
	xr_statistic.inc_counter("guide_articles")
	
	-- Set the article and retrieve the indices.
	local index_a, index_c = set_article(section)
	if not (index_a and index_c) then return end
	
	-- Send a message about unlocking the article.
	if (axr_main.config:r_value("pda_encyclopedia", "display_messages", 1, true)) then
		local text_c = game.translate_string(guide.categories[index_c].section)
		local text_a = game.translate_string(guide.categories[index_c].articles[index_a])
		local message = game.translate_string("pda_encyclopedia_notify")
		news_manager.send_tip(db.actor, strformat(message, text_c, text_a), nil, "guide_unlock", nil, nil)
	end
end