--------------------------------
----- Written by Darryl123 -----
--------------------------------

--------------------------
----- Initialisation -----
--------------------------

-- Initialises callbacks for interactivity plugin.
function on_game_start()
	-- Note that not all interactivity is done via callbacks.
	-- Examples: Entering smart terrains and field-dressing (successfully) mutants.

	-- Entering vehicles.
	RegisterScriptCallback("actor_on_attach_vehicle", on_interact_vehicle)
	
	-- Talking-to and looting important characters.
	RegisterScriptCallback("actor_on_leave_dialog", on_interact_character)
	RegisterScriptCallback("actor_menu_mode_changed", on_interact_character2)
	
	-- Using items.
	RegisterScriptCallback("actor_on_item_use", on_interact_item)
	
	-- Equipping outfits.
	RegisterScriptCallback("actor_item_to_slot", on_interact_outfit)
end

-------------------------
----- Interactivity -----
-------------------------

-- Generic method to save repeating code.
function on_interact(key, section)
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local interactivity = guide.interactivity or {}
	if (key and section and interactivity[key] and interactivity[key][section]) then
		for k, v in pairs(interactivity[key][section]) do
			unlock_article(v)
		end
	end
end

-- Characters: Talking-to.
-- Factions: Talking-to.
function on_interact_character(character)
	local faction = character_community(level.object_by_id(character))
	on_interact("factions", faction)
	local story_id = get_object_story_id(character) or nil
	if (story_id) then
		on_interact("characters", story_id)
	end
end

-- Characters: Looting.
-- Factions: Looting.
function on_interact_character2(mode, last_mode)
	if (last_mode ~= 4) then 
		return 
	end
	local character = ActorMenu.get_actor_menu():GetPartner()
	if (not character or character:alive()) then
		return
	end
	local faction = character_community(character)
	on_interact("factions", faction)
	local story_id = get_object_story_id(character:id()) or nil
	if (story_id) then
		on_interact("characters", story_id)
	end
end

-- Items: Using.
function on_interact_item(item)
	on_interact("items", item:section())
end

-- Outfits: Equipping.
function on_interact_outfit(outfit)
	on_interact("outfits", outfit:section())
end

-- Mutants: Field-dressing.
-- Does not use a script callback to function.
function on_interact_mutant(mutant)
	on_interact("mutants", mutant)
end

-- Smart terrains: Entering.
-- Does not use a script callback to function.
function on_interact_smart(smart)
	on_interact("smarts", smart:name())
end

-- Vehicles: Entering.
function on_interact_vehicle(vehicle)
	on_interact("vehicles", vehicle:section())
end

---------------------------
----- Context Options -----
---------------------------

-- Action performed by USB memory sticks.
function context_action_functor(item)
	local item_object = alife_object(item:id())
	alife():release(item_object, true)
	unlock_article()
end

-- Text displayed for USB memory sticks.
function context_functor(item)
	-- Return if the item is not in the player inventory.
	local parent = item:parent()
	if not (parent and parent:id() == db.actor:id()) then
		return
	end
	
	-- Return if there are no articles to unlock.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local locked_articles = guide.locked_articles or {}
	if (get_articles_locked_count() == 0) then
		return
	end
	
	-- Return the context option to detach a sight.
	return game.translate_string("ui_inv_download")
end

----------------------
----- Statistics -----
----------------------

-- Counts how many articles currently exist.
function get_articles_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	return guide.articles_count
end

-- Counts how many articles are locked.
function get_articles_locked_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	return guide.articles_locked_count
end

-- Counts how many articles are unlocked.
function get_articles_unlocked_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	return guide.articles_unlocked_count
end

--------------------------------
----- Article Manipulation -----
--------------------------------

-- Jumps straight to a specific article.
function set_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Return if no section exists.
	if not (section) then
		return
	end
	
	-- Discover the category of the article.
	local article = nil
	local category = nil
	for index_c = 1, #guide.categories do
		category = guide.categories[index_c]
		-- Determine if the article is in this category.
		if (category) then
			for index_a = 1, #category.articles do
				article = category.articles[index_a]
				-- Set the category and article if correct.
				if (article and article == section) then
					guide:SelectCategory(index_c)
					guide:SelectArticle(index_a)
					return
				end
			end
		end
	end
	
end

-- Unlocks an article for the player.
-- A random one will be chosen if none is specified.
function unlock_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Instance of the locked and unlocked article tables.
	local locked_articles = guide.locked_articles or {}
	local unlocked_articles = xr_statistic.actor_statistic.guide_articles
	
	-- Return if all articles have been unlocked.
	if (get_articles_locked_count() == 0) then
		return
	end
	
	-- Return if the specified article is already unlocked, or doesn't exist.
	if (section) then
		if (unlocked_articles[section]) then
			return
		elseif (not locked_articles[section]) then
			return
		end
		
	-- Should no article be specified, select one at random to unlock.
	else
		local index = 1
		local selection = math.random(get_articles_locked_count())
		for k, v in pairs(locked_articles) do
			if (index == selection) then
				section = k
				break
			end
			index = index + 1
		end
	end
	
	-- Update the required tables.
	locked_articles[section] = nil
	unlocked_articles[section] = true
	
	-- Update the required counters.
	guide.articles_locked_count = guide.articles_locked_count - 1
	guide.articles_unlocked_count = guide.articles_unlocked_count + 1
	
	-- Notify the player and update the PDA selection.
	local article = game.translate_string(section)
	local message = game.translate_string("pda_encyclopedia_notify")
	news_manager.send_tip(db.actor, strformat(message, article), nil, "guide_unlock", nil, nil)
	xr_statistic.inc_counter("guide_articles")
	set_article(section)
end