--------------------------------
----- Written by Darryl123 -----
--------------------------------

--------------------------
----- Initialisation -----
--------------------------

-- Initialises callbacks for interactivity plugin.
function on_game_start()
	-- Note that not all interactivity is done via callbacks.
	-- Examples: Entering smart terrains and field-dressing (successfully) mutants.

	-- Entering vehicles.
	RegisterScriptCallback("actor_on_attach_vehicle", on_interact_vehicle)
	
	-- Talking-to, killing and looting important characters.
	RegisterScriptCallback("actor_on_leave_dialog", on_interact_character)
	RegisterScriptCallback("actor_menu_mode_changed", on_interact_character2)
	
	-- Taking, stealing, using and trading items.
	--RegisterScriptCallback("actor_on_item_take", on_interact_item)
	--RegisterScriptCallback("actor_on_item_take_from_box", on_interact_item)
	RegisterScriptCallback("actor_on_item_use", on_interact_item)
	--RegisterScriptCallback("actor_on_trade", on_interact_item)
end

-------------------------
----- Interactivity -----
-------------------------

-- Generic method to save repeating code.
function on_interact(key, section)
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local interactivity = guide.interactivity or {}
	if not (section and interactivity[key]) then
		return
	end
	for k, v in pairs(interactivity[key]) do
		if (k == section) then
			unlock_article(v)
			break
		end
	end
end

-- Characters: Talking-to.
function on_interact_character(character)
	local story_id = get_object_story_id(character) or nil
	if (story_id) then
		on_interact("characters", story_id)
	end
end

-- Characters: Looting.
function on_interact_character2(mode,last_mode)
	if (mode ~= 4) then 
		return 
	end
	local character = ActorMenu.get_actor_menu():GetPartner()
	if not (character and character:alive()) then
		return
	end
	local story_id = get_object_story_id(character:id()) or nil
	if (story_id) then
		on_interact("characters", story_id)
	end
end

-- Items: Interacting.
function on_interact_item(item)
	on_interact("items", item:section())
end

-- Mutants: Field-dressing.
-- Does not use a script callback to function.
function on_interact_mutant(mutant)
	on_interact("mutants", mutant)
end

-- Smart terrains: Entering.
-- Does not use a script callback to function.
function on_interact_smart(smart)
	on_interact("smarts", smart:name())
end

-- Vehicles: Entering.
function on_interact_vehicle(vehicle)
	on_interact("vehicles", vehicle:section())
end

---------------------------
----- Context Options -----
---------------------------

-- Action performed by USB memory sticks.
function context_action_functor(item)
	local item_object = alife_object(item:id())
	alife():release(item_object, true)
	unlock_article()
end

-- Text displayed for USB memory sticks.
function context_functor(item)
	-- Return if the item is not in the player inventory.
	local parent = item:parent()
	if not (parent and parent:id() == db.actor:id()) then
		return
	end
	
	-- Return if there are no articles to unlock.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local locked_articles = guide.locked_articles or {}
	if (#locked_articles == 0) then
		return
	end
	
	-- Return the context option to detach a sight.
	return game.translate_string("ui_inv_download")
end

--------------------------------
----- Article Manipulation -----
--------------------------------

-- Counts how many articles currently exist.
function get_articles_count()
	return get_locked_articles_count() + get_unlocked_articles_count()
end

-- Counts how many articles are locked.
function get_locked_articles_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local locked_articles = guide.locked_articles or {}
	return #locked_articles
end

-- Counts how many articles are unlocked.
function get_unlocked_articles_count()
	local guide = ui_pda_encyclopedia_tab.get_ui()
	local count = 0
	for k, v in pairs(xr_statistic.actor_statistic.guide_articles) do
		count = count + 1
	end
	return count
end

-- Jumps straight to a specific article.
function set_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Return if no section exists.
	if not (section) then
		return
	end
	
	-- Discover the category of the article.
	local article = nil
	local category = nil
	for index1 = 1, #guide.categories do
		category = guide.categories[index1]
		-- Determine if the article is in this category.
		if (category) then
			for index2 = 1, #category.articles do
				article = category.articles[index2]
				-- Set the category and article if correct.
				if (article and article == section) then
					guide:SelectCategory(index1)
					guide:SelectArticle(index1, index2)
					return
				end
			end
		end
	end
	
end

-- Unlocks an article for the player.
-- A random one will be chosen if none is specified.
function unlock_article(section)
	-- Instance of the guide object.
	local guide = ui_pda_encyclopedia_tab.get_ui()
	
	-- Instance of the locked and unlocked article tables.
	local locked_articles = guide.locked_articles or {}
	local unlocked_articles = xr_statistic.actor_statistic.guide_articles
	
	-- Return if all articles have been unlocked.
	if (#locked_articles == 0) then
		return
	end
	
	-- Select a random article if no section was provided.
	local index = nil
	if (not section) then
		index = math.random(#locked_articles)
		section = locked_articles[index]
		
	-- Otherwise determine the section index.
	else for k, v in pairs(locked_articles) do
			if (v == section) then
				index = k
				break
			end
		end
	end
	
	-- Return if the index is nil.
	-- Caused when the requested article is already unlocked or doesn't exist.
	if (not index) then
		return
	end
	
	-- Update the required tables.
	unlocked_articles[section] = true
	table.remove(locked_articles, index)
	
	-- Notify the player and update the PDA selection.
	local article = game.translate_string(section)
	local message = game.translate_string("pda_btn_encyclopedia_notify")
	news_manager.send_tip(db.actor, strformat(message, article), nil, "guide_unlock", nil, nil)
	xr_statistic.inc_counter("guide_articles")
	set_article(section)
end