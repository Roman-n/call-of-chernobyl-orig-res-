-- run_string log("----->"..tostring(xr_statistic.actor_statistic.best_monster).." "..tostring(xr_statistic.actor_statistic.best_monster_rank))
-- Modified by Alundaio

actor_statistic = {
					actual_rank = 0,
					actual_reputation = 0,
					arena_battles = 0,
					artefacts_detected = 0,
					artefacts_founded = 0,
					best_monster = nil,
					best_monster_rank = 0,
					favorite_weapon_sect = nil,
					founded_secrets = 0,
					heli_kills = 0,
					heli_rocket_kills = 0,
					help_wounded = 0,
					killed_monsters = 0,
					killed_stalkers = 0,
					pdas_delivered = 0,
					storms = 0,
					surges = 0,
					tasks_cancelled = 0,
					tasks_completed = 0,
					tasks_failed = 0,
					visited = { 
								["jupiter"] = false,
								["k00_marsh"] = false,
								["k01_darkscape"] = false,
								["k02_trucks_cemetery"] = false,
								["l01_escape"] = false,
								["l02_garbage"] = false,
								["l03_agroprom"] = false,
								["l04_darkvalley"] = false,
								["l05_bar"] = false,
								["l06_rostok"] = false,
								["l07_military"] = false,
								["l08_yantar"] = false,
								["l09_deadcity"] = false,
								["l10_limansk"] = false,
								["l10_radar"] = false,
								["l10_red_forest"] = false,
								["l11_hospital"] = false,
								["l11_pripyat"] = false,
								["l12_stancia"] = false,
								["l12_stancia_2"] = false,
								["l13_generators"] = false,
								["pripyat"] = false,
								["zaton"] = false,
								["jupiter_underground"] = false,
								["labx8"] = false,
								["l03u_agr_underground"] = false,
								["l04u_labx18"] = false,
								["l08u_brainlab"] = false,
								["l10u_bunker"] = false,
								["l12u_control_monolith"] = false,
								["l12u_sarcofag"] = false,
								["l13u_warlab"] = false,
						}
				}

monster_classes = {
			[clsid.bloodsucker_s] 	  = "bloodsucker",
			[clsid.boar_s] 			  = "boar",
			[clsid.burer_s] 		  = "burer",
			[clsid.chimera_s] 		  = "chimera",
			[clsid.controller_s] 	  = "controller",
			[clsid.dog_s] 			  = "dog",
			[clsid.flesh_s] 		  = "flesh",
			[clsid.gigant_s] 		  = "gigant",
			[clsid.poltergeist_s] 	  = "poltergeist",
			[clsid.psy_dog_s] 		  = "psy_dog",
			[clsid.pseudodog_s]		  = "pseudodog",
			[clsid.snork_s ] 		  = "snork",
			[clsid.tushkano_s ] 	  = "tushkano",
			[clsid.cat_s]			  = "cat",
			[clsid.rat_s]			  = "rat",
			[clsid.rat]			  	  = "rat",
			[clsid.zombie_s]		  = "zombie",
			[clsid.fracture_s]		  = "fracture"
		}

rank_rep = {
			-- Gameplay mechanics.
			arena_chal			=	{rnk=50,	rpt=100},
			arena_boro			=	{rnk=75,	rpt=150},
			arena_trad			=	{rnk=100,	rpt=200},
			surges				=	{rnk=5,		rpt=0},
			storms				=	{rnk=5,		rpt=0},
			tasks				=	{rnk=50,	rpt=100},
			tasks_fail			=	{rnk=0,		rpt=-100},
			tasks_cancel		=	{rnk=0,		rpt=-100},
			monsters			=	{rnk=5,		rpt=0},
			stalkers			=	{rnk=0,		rpt=0}, -- Handled in game_relations.ltx
			found_arts			=	{rnk=5,		rpt=0},
			detect_arts			=	{rnk=5,		rpt=0},
			secrets				=	{rnk=10,	rpt=0},
			pdas				=	{rnk=10,	rpt=20},
			heli				=	{rnk=50,	rpt=50},
			heli_rocket			=	{rnk=50,	rpt=50},
			wounded				=	{rnk=25,	rpt=50},
			
			-- Achievements
			completionist 		=	{rnk=50,	rpt=0},
			clear_skies			=	{rnk=25,	rpt=0},
			duga_free			=	{rnk=25,	rpt=0},
			geologist			=	{rnk=25,	rpt=0},
			heavy_pockets		=	{rnk=25,	rpt=0},
			infopreneur			=	{rnk=25,	rpt=0},
			mechanized_warfare	=	{rnk=25,	rpt=0},
			patriarch			=	{rnk=25,	rpt=0},
			radiotherapy		=	{rnk=25,	rpt=0},
			rag_and_bone		=	{rnk=25,	rpt=0},
			silver_or_lead		=	{rnk=25,	rpt=0},
			tourist				=	{rnk=25,	rpt=0},
			well_dressed		=	{rnk=25,	rpt=0},
			wishful_thinking	=	{rnk=500,	rpt=1000}, -- Getting this is a huge feat.
}

weapons_table = {}

artefacts_table = {
	af_cristall = false,
	af_blood = false,
	af_electra_sparkler = false,
	af_cristall_flower = false,
	af_medusa = false,
	af_fireball = false,
	af_mincer_meat = false,
	af_electra_flash = false,
	af_night_star = false,
	af_dummy_glassbeads = false,
	af_soul = false,
	af_electra_moonlight = false,
	af_dummy_battery = false,
	af_vyvert = false,
	af_fuzz_kolobok = false,
	af_gravi = false,
	af_eye = false,
	af_baloon = false,
	af_dummy_dummy = false,
	af_gold_fish = false,
	af_fire = false,
	af_glass = false,
	af_ice = false,
}

taken_artefacts = {}

function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_item_take",actor_on_item_take)
	init_ranks_reps()
end

function on_game_load()
	actor_statistic.visited[level.name()] = true
end

function actor_on_item_take(item)
	if IsArtefact(item) then
		local artefact = item:get_artefact()
		if (artefact) then
			local anomal_zone = bind_anomaly_zone.parent_zones_by_artefact_id[item:id()]
			if anomal_zone ~= nil then
				anomal_zone:on_artefact_take(item)
				inc_artefacts_detected_counter()
			else
				bind_anomaly_zone.artefact_ways_by_id[item:id()] = nil
			end
			artefact:FollowByPath("NULL",0,vector():set(500,500,500))
			inc_founded_artefacts_counter(item:id())
		end
	end
end

function save_state(data)
	--alun_utils.debug_write("xr_statistic.save_state")
	if not (data.xr_statistic) then
		data.xr_statistic = {}
	end

	data.xr_statistic.actor_statistic = actor_statistic
	data.xr_statistic.artefacts_table = artefacts_table
	data.xr_statistic.taken_artefacts = taken_artefacts
	data.xr_statistic.weapons_table = weapons_table
end

function load_state(data)
	if not (data.xr_statistic) then
		return
	end
	-- previous save compatibility
	for i,j in pairs(actor_statistic) do
		if data.xr_statistic.actor_statistic[i] == nil then
			data.xr_statistic.actor_statistic[i] = actor_statistic[i]
		end
	end
	
	actor_statistic = data.xr_statistic.actor_statistic or actor_statistic
	artefacts_table = data.xr_statistic.artefacts_table or artefacts_table
	taken_artefacts = data.xr_statistic.taken_artefacts or taken_artefacts
	weapons_table = data.xr_statistic.weapons_table or weapons_table

	data.xr_statistic = nil
end

function inc_surges_counter()
	actor_statistic.surges = actor_statistic.surges + 1
	inc_actor_rank(rank_rep.surges.rnk)
	inc_actor_reputation(rank_rep.surges.rpt)
end
function inc_storms_counter()
	actor_statistic.storms = actor_statistic.storms + 1
	inc_actor_rank(rank_rep.storms.rnk)
	inc_actor_reputation(rank_rep.storms.rpt)
end
function inc_tasks_completed_counter()
	actor_statistic.tasks_completed = actor_statistic.tasks_completed + 1
	inc_actor_rank(rank_rep.tasks.rnk)
	inc_actor_reputation(rank_rep.tasks.rpt)
end

function inc_tasks_failed_counter()
	actor_statistic.tasks_failed = actor_statistic.tasks_failed + 1
	inc_actor_rank(rank_rep.tasks_fail.rnk)
	inc_actor_reputation(rank_rep.tasks_fail.rpt)
end

function inc_tasks_cancelled_counter()
	actor_statistic.tasks_cancelled = actor_statistic.tasks_cancelled + 1
	inc_actor_rank(rank_rep.tasks_cancel.rnk)
	inc_actor_reputation(rank_rep.tasks_cancel.rpt)
end

function inc_killed_monsters_counter()
	actor_statistic.killed_monsters = actor_statistic.killed_monsters + 1
	inc_actor_rank(rank_rep.monsters.rnk)
	inc_actor_reputation(rank_rep.monsters.rpt)
end
function inc_killed_stalkers_counter()
	actor_statistic.killed_stalkers = actor_statistic.killed_stalkers + 1
	inc_actor_rank()
	inc_actor_reputation()
end
function inc_founded_artefacts_counter(art_id)
	if(taken_artefacts[art_id]==nil) then
		actor_statistic.artefacts_founded = actor_statistic.artefacts_founded + 1
		inc_actor_rank(rank_rep.found_arts.rnk)
		inc_actor_reputation(rank_rep.found_arts.rpt)
		taken_artefacts[art_id] = art_id
		local s_art = alife():object(art_id)
		if(s_art and s_art:section_name()) then
			artefacts_table[s_art:section_name()] = true
		end
	end
end
function inc_founded_secrets_counter()
	actor_statistic.founded_secrets = actor_statistic.founded_secrets + 1
	inc_actor_rank(rank_rep.secrets.rnk)
	inc_actor_reputation(rank_rep.secrets.rpt)
end
function inc_pdas_delivered_counter()
	actor_statistic.pdas_delivered = actor_statistic.pdas_delivered + 1
	inc_actor_rank(rank_rep.pdas.rnk)
	inc_actor_reputation(rank_rep.pdas.rpt)
end
function inc_heli_kills()
	actor_statistic.heli_kills = actor_statistic.heli_kills + 1
	inc_actor_rank(rank_rep.heli.rnk)
	inc_actor_reputation(rank_rep.heli.rpt)
end
function inc_heli_rocket_kills()
	actor_statistic.heli_rocket_kills = actor_statistic.heli_rocket_kills + 1
	inc_actor_rank(rank_rep.heli_rocket.rnk)
	inc_actor_reputation(rank_rep.heli_rocket.rpt)
end
function inc_artefacts_detected_counter()
	actor_statistic.artefacts_detected = actor_statistic.artefacts_detected + 1
	inc_actor_rank(rank_rep.detect_arts.rnk)
	inc_actor_reputation(rank_rep.detect_arts.rpt)
end
function inc_help_wounded_counter()
	actor_statistic.help_wounded = actor_statistic.help_wounded + 1
	inc_actor_rank(rank_rep.wounded.rnk)
	inc_actor_reputation(rank_rep.wounded.rpt)
end
function inc_arena_battles_counter(mode)
	actor_statistic.arena_battles = actor_statistic.arena_battles + 1
	-- Invalid.
	if (mode == nil) then
		return
	-- Challenge arena.
	elseif (mode == "challenge") then
		inc_actor_rank(rank_rep.arena_chal.rnk)
		inc_actor_reputation(rank_rep.arena_chal.rpt)
	-- Traditional arena.
	elseif (mode == "traditional") then
		inc_actor_rank(rank_rep.arena_trad.rnk)
		inc_actor_reputation(rank_rep.arena_trad.rpt)
	-- Borovos' arena.
	elseif (mode == "borovos") then
		inc_actor_rank(rank_rep.arena_boro.rnk)
		inc_actor_reputation(rank_rep.arena_boro.rpt)
	end
end

function set_best_monster(obj)
	if not IsMonster(obj) then
		return 
	end
	local community = monster_classes[get_clsid(obj)]
	if not(community) then
		printf("Statistic ERROR: cannot find monster class for [%s] clsid [%s]", obj:name(), tostring(get_clsid(obj)))
		return
	end
	local s_obj = alife():object(obj:id())
	if(s_obj) then
		local rank = s_obj:rank()
		if(community=="flesh") then
			if(rank==3) then
				community = community.."_strong"
			else
				community = community.."_weak"
			end
		elseif(community=="poltergeist") then
			if(rank==12) then
				community = community.."_flame"
			else
				community = community.."_tele"
			end
		elseif(community=="boar") then
			if(rank==6) then
				community = community.."_strong"
			else
				community = community.."_weak"
			end
		elseif(community=="pseudodog" or community=="psy_dog") then
			if(rank==13) then
				community = community.."_strong"
			else
				community = community.."_weak"
			end
		elseif(community=="bloodsucker") then
			if(rank==16) then
				community = community.."_strong"
			elseif(rank==15) then
				community = community.."_normal"
			else
				community = community.."_weak"
			end
		end
		if(rank>actor_statistic.best_monster_rank) then
			actor_statistic.best_monster_rank = rank
			actor_statistic.best_monster = community
		end
	end
end

function set_best_weapon(hit_amount)
	-- Weapon currently equipped.
	local active_item = db.actor:active_item()
	
	-- If equipped is not a weapon or does not exist, return.
	if (not active_item) or (not IsWeapon(active_item)) then
		return
	end

	-- Trigger notifications for wounding.
	-- I don't think this works, needs looking at.
	if (hit_amount > 0) then
		check_actor_rank_change()
		check_actor_reputation_change()
	end
	
	-- A section called 'parent_section' is used by AO3 and STCoP.
	-- It tells them which weapon is the 'parent' of a modified weapon.
	-- Example: An AK-74 with an EKP sight attach has a parent_section of 'wpn_ak74'.
	local parent_section = alun_utils.read_from_ini(system_ini(), active_item:section(), "parent_section") or active_item:section()

	-- By using this section we can have stats 'stack' for weapons regardless of attached scopes.
	-- Of course if this section does not exist then it will just default to the weapon section name instead.
	weapons_table[parent_section] = weapons_table[parent_section] and weapons_table[parent_section] + hit_amount or hit_amount

	for sec,v in spairs(weapons_table, function(t,a,b) return t[b] < t[a] end) do
		actor_statistic.favorite_weapon_sect = sec
		return
	end	
end

function save(package)
	if (USE_MARSHAL) then
		return
	end
	package:w_u16(actor_statistic.arena_battles)
	package:w_u16(actor_statistic.surges)
	package:w_u16(actor_statistic.storms)
	package:w_u16(actor_statistic.tasks_completed)
	package:w_u16(actor_statistic.tasks_failed)
	package:w_u16(actor_statistic.tasks_cancelled)
	package:w_u32(actor_statistic.killed_monsters)
	package:w_u32(actor_statistic.killed_stalkers)
	package:w_u16(actor_statistic.founded_secrets)
	package:w_u16(actor_statistic.artefacts_founded)
	package:w_u32(actor_statistic.best_monster_rank)
	package:w_u16(actor_statistic.pdas_delivered)
	package:w_u16(actor_statistic.heli_kills)
	package:w_u16(actor_statistic.heli_rocket_kills)
	package:w_u16(actor_statistic.artefacts_detected)
	package:w_u16(actor_statistic.help_wounded)
	package:w_u16(actor_statistic.actual_rank)
	package:w_u16(actor_statistic.actual_reputation)
	package:w_stringZ(tostring(actor_statistic.best_monster))
	package:w_stringZ(tostring(actor_statistic.favorite_weapon_sect))

	local i = 0
-- add write for level visits
	for k,v in pairs(actor_statistic.visited) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(actor_statistic.visited) do
		package:w_stringZ(tostring(k))
		package:w_bool(v)
	end
	i = 0
--
	for k,v in pairs(weapons_table) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(weapons_table) do
		package:w_stringZ(tostring(k))
		package:w_float(v)
	end
	i = 0
	for k,v in pairs(artefacts_table) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(artefacts_table) do
		package:w_stringZ(tostring(k))
		package:w_bool(v)
	end
	i = 0
	for k,v in pairs(taken_artefacts) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(taken_artefacts) do
		package:w_u32(k)
	end
end

function load(package)
	if (USE_MARSHAL) then
		return
	end
	actor_statistic = {}
	actor_statistic.arena_battles  		= package:r_u16()
	actor_statistic.surges  			= package:r_u16()
	actor_statistic.storms  			= package:r_u16()
	actor_statistic.tasks_completed 	= package:r_u16()
	actor_statistic.tasks_failed	 	= package:r_u16()
	actor_statistic.tasks_cancelled	= package:r_u16()
	actor_statistic.killed_monsters  	= package:r_u32()
	actor_statistic.killed_stalkers  	= package:r_u32()
	actor_statistic.founded_secrets  	= package:r_u16()
	actor_statistic.artefacts_founded	= package:r_u16()
	actor_statistic.best_monster_rank 	= package:r_u32()
	actor_statistic.pdas_delivered 		= package:r_u16()
	actor_statistic.heli_kills			= package:r_u16()
	actor_statistic.heli_rocket_kills	= package:r_u16()
	actor_statistic.artefacts_detected 	= package:r_u16()
	actor_statistic.help_wounded		= package:r_u16()
	actor_statistic.actual_rank 		= package:r_u16()
	actor_statistic.actual_reputation	= package:r_u16()

	local str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.best_monster = str
	end
	str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.favorite_weapon_sect = str
	end
	--add read for visited level
	actor_statistic.visited = {}
	for i = 1,package:r_u16() do
		actor_statistic.visited[package:r_stringZ()] = package:r_bool()
	end
	--
	weapons_table = {}
	local n = package:r_u16()
	for i = 1,n do
		local k = package:r_stringZ()
		local v = package:r_float()
		weapons_table[k] = v
	end
	artefacts_table = {}
	n = package:r_u16()
	for i = 1,n do
		log("n "..tostring(n))
		local k = package:r_stringZ()
		local v = package:r_bool()
		artefacts_table[k] = v
	end

	taken_artefacts = {}
	n = package:r_u16()
	for i = 1,n do
		local k = package:r_u32()
		taken_artefacts[k] = k
	end
end

function actor_visited_all_levels()
	for level,v in pairs(actor_statistic.visited) do 
		if (v == false) then 
			return false 
		end
	end
	return true
end

-- Notes --
-- These methods are disabled in-engine:
-- db.actor:change_character_rank(num)
-- db.actor:set_character_reputation(num)

local ranks, reputations = {}, {}
function init_ranks_reps()
	local function parse_str(s)
		local t = {}
		for name in string.gfind( s, "([%w_%-.\\]+)[%,%s]*" ) do table.insert( t, name ) end
		return t
	end
	local tbl = parse_str(ini_file("creatures\\game_relations.ltx"):r_string_ex("game_relations","rating"))
	local tbl2 = parse_str(ini_file("creatures\\game_relations.ltx"):r_string_ex("game_relations","reputation"))
	for i=2, #tbl, 2 do
		table.insert(ranks, tonumber(tbl[i]))
	end
	for i=2, #tbl2, 2 do
		table.insert(reputations, tonumber(tbl2[i]))
	end
end

-- Increment the actor rank.
function inc_actor_rank(rank)
	if rank and ((db.actor:character_rank()+rank) <= 8000 and (db.actor:character_rank()+rank) >= 0 and rank >= 0) then
		db.actor:set_character_rank(db.actor:character_rank() + rank)
	end
	check_actor_rank_change()
--	news_manager.send_tip(db.actor, "Rank: ".. db.actor:character_rank(), nil, "rank_change", nil, nil)
end

-- Check for actor rank change.
function check_actor_rank_change()
	local current_rank = db.actor:character_rank()
	local new, old = 0, 0
	for i=1,#ranks do
		if current_rank <= ranks[i] then break end
		new = new + 1
	end
	for i=1,#ranks do
		if actor_statistic.actual_rank <= ranks[i] then break end
		old = old + 1
	end
	if old > new then
		news_manager.send_tip(db.actor, "st_rank_decreased", nil, "rank_change", nil, nil)
	elseif new > old then
		news_manager.send_tip(db.actor, "st_rank_increased", nil, "rank_change", nil, nil)
	end
	actor_statistic.actual_rank = current_rank
end

-- Increment the actor reputation.
function inc_actor_reputation(reputation)
	if reputation and ((db.actor:character_reputation()+reputation) <= 2500 and (db.actor:character_reputation()+reputation) >= -2500) then
		db.actor:change_character_reputation(reputation)
	end
--	news_manager.send_tip(db.actor, "Reputation: ".. db.actor:character_reputation(), nil, "reputation_change", nil, nil)
	check_actor_reputation_change()
end

-- Check for actor reputation change.
function check_actor_reputation_change()
	local current_reputation = db.actor:character_reputation()
	local new, old = 0, 0
	for i=1,#reputations do
		if current_reputation <= reputations[i] then break end
		new = new + 1
	end
	for i=1,#reputations do
		if actor_statistic.actual_reputation <= reputations[i] then break end
		old = old + 1
	end
	if old > new then
		news_manager.send_tip(db.actor, "st_reputation_decreased", nil, "reputation_change", nil, nil)
	elseif new > old then
		news_manager.send_tip(db.actor, "st_reputation_increased", nil, "reputation_change", nil, nil)
	end
	actor_statistic.actual_reputation = current_reputation
 end