--[[ Dynamic News by ARS Team, xStream, Red75, Dexxx, Skunk, Xmk
	Re-vamped by Alundaio for Call of Chernobyl
--]]

local show_about_death = true -- show death alerts from other stalkers
local show_about_death_mutant = true -- show death alerts from other stalkers about mutant deaths
local show_death_generic = false -- show generic death alerts (ie. Dead:)
local show_about_something = true  -- show general news tips
local show_about_kill_wounded = true
local show_about_bounty = true

----------------------------------------------------------------------------------------------------
local instance = nil -- don't touch
function get_dynamic_news()
	instance = instance or DynamicNewsManager()
	return instance
end

function destroy_dynamic_news()
	if (instance) then 
		instance:destroy()
	end
	instance = nil
end

function on_game_start()
	if (axr_main.config:GetValue("mm_options","enable_dynamic_news",1,true) == false) then
		return 
	end
		
	local function on_game_load()
		get_dynamic_news()
	end 
	RegisterScriptCallback("on_game_load",on_game_load)
end

----------------------------------------------------------------------------------------------------
class "DynamicNewsManager"
function DynamicNewsManager:__init()

	local comm = db.actor:character_community()
	if (comm ~= "actor") then 
		comm = comm:sub(7) -- remove 'actor_' prefix
	end
	
	self.channel_status = {
		["general"]			= true,
		["stalker"]  		= true,
		["monolith"] 		= (comm == "monolith"),
		["csky"]   			= true,
		["army"] 			= (comm == "army"),
		["killer"]   		= true,
		["ecolog"]   		= true,
		["dolg"]    		= true,
		["freedom"]  		= true,
		["bandit"]   		= true,
	}

	self.queue = {
		["general"]			= {},
		["stalker"]  		= {},
		["monolith"] 		= {},
		["csky"]   			= {},
		["army"] 			= {},
		["killer"]   		= {},
		["ecolog"]   		= {},
		["dolg"]    		= {},
		["freedom"]  		= {},
		["bandit"]   		= {}
	}
	
	self.spammer = {	
		["show_about_death"] = 0,
		["show_about_kill_wounded"] = 0,
		["show_about_bounty"] = 0,
		["show_about_death_mutant"] = 0
	}
	
	CreateTimeEvent("DynamicNewsManager","NewsTick",10*level.get_time_factor(),self.NewsTick,self)
	CreateTimeEvent("DynamicNewsManager","TickSpecialEvent",10*level.get_time_factor(),self.TickSpecialEvent,self)

	RegisterScriptCallback("monster_on_death_callback", self.monster_on_death_callback, self)
	--RegisterScriptCallback("monster_on_net_spawn", self.monster_on_net_spawn, self)	
	RegisterScriptCallback("npc_on_death_callback", self.npc_on_death_callback, self)
	--RegisterScriptCallback("npc_on_hear_callback", self.npc_on_hear_callback, self)
end

function DynamicNewsManager:destroy()
	RemoveTimeEvent("DynamicNewsManager","NewsTick")
	RemoveTimeEvent("DynamicNewsManager","TickSpecialEvent")
	UnregisterScriptCallback("monster_on_death_callback", self.monster_on_death_callback, self)
	--UnregisterScriptCallback("monster_on_net_spawn", self.monster_on_net_spawn, self)	
	UnregisterScriptCallback("npc_on_death_callback", self.npc_on_death_callback, self)
end

function DynamicNewsManager:NewsTick()
	if (surge_manager.is_started()) then
		return false
	end 
	
	if (axr_main.config:GetValue("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	local lname = level.name()
	if not (level_weathers.valid_levels[lname]) then 
		return true
	end
	
	local function reset(dnm)
		CreateTimeEvent("DynamicNewsManager","NewsTick",math.random(8,15)*level.get_time_factor(),dnm.NewsTick,dnm)
	end
	CreateTimeEvent("DynamicNewsManager","ResetNewsTick",1,reset,self)
	
	local c
	for k,v in pairs(self.queue) do
		c = #v
		if (c > 0) then
			dynamic_news_helper.send_tip(v[c].Mg,v[c].Se, nil, nil,v[c].Ic,v[c].Snd,v[c].It)
			v[c] = nil
			return true
		end
	end
	
	return true
end

function DynamicNewsManager:TickSpecialEvent()
	if (axr_main.config:GetValue("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	local function reset(dnm)
		CreateTimeEvent("DynamicNewsManager","TickSpecialEvent",math.random(120,240)*level.get_time_factor(),dnm.TickSpecialEvent,dnm)
	end
	CreateTimeEvent("DynamicNewsManager","ResetTickSpecialEvent",1,reset,self)
	
	self:GossipBounty()
	
	return true
end

----------------- callbacks
function DynamicNewsManager:monster_on_net_spawn(npc,se_obj)

end 

function DynamicNewsManager:monster_on_death_callback(victim,who)
	if not (who and IsStalker(who) and show_about_death_mutant) then
		return 
	end
	
	local say = false
	if (self.spammer.show_about_death_mutant == 0) then
		local l = math.random(1,2)
		if l == 1 then
			say = self:GossipDeathOfMutant(victim,who)
		elseif l == 2 then 
			say = self:SeenDeathOfMutant(victim,who)
		end
	end
	
	if (say) then
		self.spammer.show_about_death_mutant = self.spammer.show_about_death_mutant + 1
		if (self.spammer.show_about_death_mutant > 3) then
			self.spammer.show_about_death_mutant = 0
		end
	end
end

function DynamicNewsManager:npc_on_death_callback(victim,who)
	if not (db.actor and victim and show_about_death) then 
		return 
	end
	
	local comm = character_community(victim)
	if not (self.channel_status[comm]) then 
		return 
	end
	
	if not (who and who.clsid) then 
		if (show_death_generic and surge_manager.is_killing_all()) then
			self:DeathBySurge(victim,who,comm)
		end 
		return
	end

	local say = false
	if (self.spammer.show_about_death == 0) then
		if (IsStalker(who)) then
			say = self:SOSDeathByStalker(victim,who,comm)
			if not (say) then
				local i = show_death_generic and math.random(1,3) or math.random(2,3)
				if i == 1 then
					self:DeathByStalker(victim,who,comm)
				elseif i == 2 then
					self:GossipDeathByStalker(victim,who)
				elseif i == 3 then
					self:SeenDeathOfStalker(victim,who,comm)
				end
			end
		elseif (IsMonster(who)) then
			say = self:SOSDeathByMutant(victim,who,comm)
			if not (say) then
				local k = show_death_generic and math.random(1,2) or 2
				if k == 1 then
					self:DeathByMutant(victim,who,comm)
				elseif k == 2 then 
					self:SeenDeathByMutant(victim,who,comm)
				end
			end
		end
	end
	
	if (say) then
		self.spammer.show_about_death = self.spammer.show_about_death + 1
		if (self.spammer.show_about_death > 3) then
			self.spammer.show_about_death = 0
		end
	end
end

function DynamicNewsManager:npc_on_hear_callback(npc,who_id,s_type,sound_dist,sound_power,sound_position)

end

------------------------ utility
function DynamicNewsManager:PushToChannel(name,t)
	if (self.queue[name]) then
		table.insert(self.queue[name],t)
	end
end 

function DynamicNewsManager:FindSpeakerNoVictim(who,same_as_who,not_in_combat)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			st = db.storage[db.OnlineStalkers[i]]
			npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
					comm_sender = npc:character_community()
					if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
						if (self.channel_status[comm_sender]) then
							table.insert(t,npc)
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:FindSpeaker(victim,who,same_as_victim,same_as_who,not_in_combat,can_see)
	local comm = character_community(victim)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			st = db.storage[db.OnlineStalkers[i]]
			npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
					comm_sender = npc:character_community()
					if (same_as_victim == nil) or (same_as_victim == true and comm_sender == comm) or (same_as_victim == false and comm_sender ~= comm) then
						if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
							if (self.channel_status[comm_sender]) then
								if (can_see == nil) or (can_see and npc:see(victim)) or (can_see == false) then
									table.insert(t,npc)
								end
							end
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:FindSpeakerWithEnemy(victim,who,same_as_victim,same_as_who,can_see)
	local comm = character_community(victim)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			st = db.storage[db.OnlineStalkers[i]]
			npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i]) and npc:best_enemy()) then
				comm_sender = npc:character_community()
				if (same_as_victim == nil) or (same_as_victim == true and comm_sender == comm) or (same_as_victim == false and comm_sender ~= comm) then
					if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
						if (self.channel_status[comm_sender]) then
							if (can_see == nil) or (can_see and npc:see(victim)) or (can_see == false) then
								table.insert(t,npc)
							end
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:GossipBounty()
	if not (show_about_bounty) then 
		return 
	end
	if (self.spammer.show_about_bounty == 0) then
		local bounty
		for task_id,npc_id in pairs(axr_task_manager.bounties_by_id) do
			bounty = db.storage[npc_id] and db.storage[npc_id].object
			if (bounty and bounty:alive()) then 
				break 
			end
		end
		
		if not (bounty) then
			return false
		end

		local sender = self:FindSpeakerNoVictim(bounty,false,true)
		if not (sender) then
			--printf("GossipBounty can't find sender")
			return false
		end
		
		local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
		
		local s = {	"I just seen %s, %s. I heard someone put a bounty on his head.", 
					"I heard that someone put a bounty on %s's head",
					"Anyone know what's up with %s lately? He's been hanging around %s. It's almost like he is hiding from someone.",
					"I heard Sidorovich is looking for %s. I just saw him %s."
		}
		
		local a = strformat(s[math.random(#s)],bounty:character_name(),dynamic_news_helper.GetPointDescription(bounty))
		
		local msg = a
		
		self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
		
		return true
	end
	
	self.spammer.show_about_bounty = self.spammer.show_about_bounty + 1
	if (self.spammer.show_about_bounty > 3) then
		self.spammer.show_about_bounty = 0
	end
	
	return false
end

function DynamicNewsManager:RadioInHeli(sender,who)
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local msg = ""
	
	local r = math.random(1,2)
	if (r == 1) then
		local s = {	"Requesting chopper assistance. Bogey located %s.",  
					"Requesting air support to our location; we need backup.",
					"Enemy seen %s. Air assistance needed, over.",
					"Ground to 'Airhog', we need backup ASAP!",
		}
		
		msg = strformat(s[math.random(#s)],dynamic_news_helper.GetPointDescription(who))
	elseif (r == 2) then 
		if (IsStalker(who)) then 
			local s = {	"Requesting chopper assistance %s. We are under attack by %s.",
						"Enemies spotted %s. Our squad is under attack by %s.",
						"Ground-unit to Air-unit, requesting aid %s. We are being assaulted by %s!"
			}
			local a = dynamic_news_helper.GetPointDescription(who) 
			local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
			
			msg = strformat(s[math.random(#s)],a,b)
		elseif (IsMonster(who)) then
			local s = {	"Requesting chopper assistance %s. We are under attack by %s.",
						"Enemies spotted %s. Our squad is under attack by %s.",
						"Ground-unit to Air-unit, requesting aid %s. We are being assaulted by %s."
			}
			local a = dynamic_news_helper.GetPointDescription(who) 
			local b = dynamic_news_helper.GetMonsterDescription(who,2)
			
			msg = strformat(s[math.random(#s)],a,b)
		end
	end
	
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	return true
end

function DynamicNewsManager:DeathBySurge(victim,who,comm)
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]Found %s. Blowout.",victim:character_name(),game.translate_string(comm),dynamic_news_helper.GetPointDescription(victim))
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se="Died:",It="gr"})
	return true
end

function DynamicNewsManager:DeathByStalker(victim,who,comm)
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]Found %s. %s.",victim:character_name(),game.translate_string(comm),dynamic_news_helper.GetPointDescription(victim),dynamic_news_helper.GetWeaponDescription(victim,1))
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se="Died:",It="gr"})
	return true
end

function DynamicNewsManager:DeathByMutant(victim,who,comm)
	local a = victim:character_name()
	local b = game.translate_string(comm)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = dynamic_news_helper.GetMonsterDescription(who,2)
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]Found %s. %s.",a,b,c,d)
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se="Died:",It="gr"})
	return true
end 

function DynamicNewsManager:GossipDeathByStalker(victim,who)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,false,nil,true)
	if not (sender) then
		--printf("GossipDeathByStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local TblTime = {"I heard","I just heard","A little while ago I heard","A few minutes ago I heard","A couple minutes ago I heard","I hear","I can hear","I'm hearing","Hey, I just heard","Guys, I'm hearing"}
	local TblSaw = {"Stay alert.","Watch your fire, people.","Wonder what's up.","Sounds rough.","Anyone see what's happening?","Anyone nearby?","","","","","","","","","",""}
	
	local a = TblTime[math.random(#TblTime)]
	local b = dynamic_news_helper.GetWeaponDescription(who,2)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = TblSaw[math.random(#TblSaw)]

	local msg = strformat("%s %s %s. %s",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SOSDeathByStalker(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeakerWithEnemy(victim,who,true,false)
	if not (sender) then
		--printf("SOSDeathByStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local a = dynamic_news_helper.GetCommunityDescription(sender,math.random(11,14))
	local b,c = self:BuildSentenceStalkerEnemy(victim,who,0,30)
	local d = dynamic_news_helper.GetPointDescription(victim)

	local msg = strformat("%s %s %s %s!",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathOfStalker(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,false,false,true)
	if not (sender) then
		--printf("SeenDeathOfStalker can't find sender")
		return false
	end
	
	local sentence = {"I saw","I just saw","Hey, I just saw","A little while ago I saw","A few minutes ago I saw","Just now I saw","Hey, uh, I just saw"}
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local a = sentence[math.random(#sentence)]
	local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
	local c = dynamic_news_helper.GetWeaponDescription(who,math.random(4,8))
	local d = dynamic_news_helper.GetCommunityDescription(sender,math.random(3,4))
	local e = dynamic_news_helper.GetPointDescription(victim)
	
	local msg = strformat("%s %s %s %s %s.",a,b,c,d,e)
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathOfMutant(victim,who)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,nil,false,true)
	if not (sender) then
		--printf("SeenDeathOfMutant can't find sender")
		return false
	end
	
	local sentence = {"I saw","I just saw","Hey, I just saw","A little while ago I saw","A few minutes ago I saw","Just now I saw","Hey, uh, I just saw"}
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local a = sentence[math.random(#sentence)]
	local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
	local c = dynamic_news_helper.GetWeaponDescription(who,math.random(4,6))
	local d = dynamic_news_helper.GetMonsterDescription(victim,3)
	local e = dynamic_news_helper.GetPointDescription(victim)
	
	local msg = strformat("%s %s %s %s %s.",a,b,c,d,e)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathByMutant(victim,who,comm)
	local sender = self:FindSpeaker(victim,who,false,nil,true)
	if not (sender) then
		--printf("SeenDeathByMutant can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local start = {"I heard","I just heard","A little while ago I heard","A few minutes ago I heard","A couple minutes ago I heard","Hey, uh, I just heard","I'm hearing","Guys, I can hear"}
	local middle = {"somebody screaming","screaming","cries for help","screaming and fighting","some fucked up noises"}
	local ending = {"Watch out.", "Keep your eyes open.", "Stay safe.", "Be careful.","I'd stay away if I were you.","Anybody wanna check it out?","","","","","","","","","",""}
	
	local a = start[math.random(#start)]
	local b = middle[math.random(#middle)]
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = ending[math.random(#ending)]
	
	local msg = strformat("%s %s %s.\\n%s",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end 

function DynamicNewsManager:GossipDeathOfMutant(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,nil,false,true)
	if not (sender) then
		--printf("GossipDeathByStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local TblTime = {"I heard","I just heard","A little while ago I heard","A few minutes ago I heard","A couple minutes ago I heard","I hear","I can hear","I'm hearing","Hey, I just heard","Guys, I'm hearing"}
	local TblSaw = {"Stay alert.","Watch your fire, people.","Wonder what's up.","Sounds rough.","Anyone see what's happening?","Anyone nearby?","","","","","","","","","",""}
	
	local a = TblTime[math.random(#TblTime)]
	local b = dynamic_news_helper.GetWeaponDescription(who,2)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = TblSaw[math.random(#TblSaw)]

	local msg = strformat("%s %s %s. %s",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end 

function DynamicNewsManager:SOSDeathByMutant(victim,who)
	local sender = self:FindSpeakerWithEnemy(victim,who,true,nil)
	if not (sender) then
		--printf("SOSDeathByMutant can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local a = dynamic_news_helper.GetCommunityDescription(sender,math.random(11,14))
	local b = dynamic_news_helper.GetMonsterDescription(who,math.random(9,10))
	local c = dynamic_news_helper.GetPointDescription(victim)

	local msg = strformat("%s %s %s!",a,b,c)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:FoundArtefact(sender,itm)
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local Tbl = {	
					"My lucky day! I just found a %s",
					"Anyone know the going rate for a %s?",
					"A %s! Maybe finally I can retire!",
					"Sakharov will want his hands on this %s!"
	}
	
	local inv_name = game.translate_string(system_ini():r_string_ex(itm:section(),"inv_name") or "")

	self:PushToChannel(sender:character_community(),{Mg=strformat(Tbl[math.random(#Tbl)],inv_name),Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:BoughtItems(sender,who,list)
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local msg = ""
	local sec = list[math.random(#list)]
	local inv_name = game.translate_string(system_ini():r_string_ex(sec,"inv_name") or "")
	
	local r = math.random(1,2)
	if (r == 1) then
		local Tbl1 = {	
						"%s has some very shitty deals. I think he ripped me off on a %s.",
						"Anyone know when %s will get more %s in stock?",
						"%s has some good deals on %s, today.",
						"I'll be broke in no time if %s keeps raising his prices."
		}
		
		msg = strformat(Tbl1[math.random(#Tbl1)],who:character_name(),inv_name)
	elseif (r == 2) then 
		local Tbl1 = {	
						"%s costs too much... damn.",
						"Anyone know where I can buy %s? %s is out of them.",
						"Shit... Good deals on %s, today.",
						"I just bought %s, just don't hope some asshole doesn't takes it from my stash..."
		}
		
		msg = strformat(Tbl1[math.random(#Tbl1)],inv_name,who:character_name())	
	end

	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	return true
end

function DynamicNewsManager:KillWounded(sender,victim,is_hostage)
	if not (show_about_kill_wounded) then 
		return false
	end
	
	local squad = get_object_squad(sender)
	if not (squad and squad:commander_id() == sender:id()) then
		return false
	end
	
	if (self.spammer.show_about_kill_wounded == 0) then
		local Tbl, Se
		if not (is_hostage) then
			Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
			Tbl = { 
							"One is still alive. Put them out of their misery!",
							"Quick! Over there, he is still alive.",
							"This one thought he could get away by playing dead.",
							"Time to put him down for good.",
							"Let sleeping dogs lie.",
							"There is still one left. Let's see if we can extract information.",
							"Put this dog down!",
							"Surrender, asshole! We know you are wounded!",
							"He's wounded... Kill him!"
			}
		else 
			Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
			Tbl = { 
							"Looks like we got ourselves a hostage, boys.",
							"This punkass thought he could escape. Someone keep an eye on him.",
							"Do you think those stalkers will pay his ransom?",
							"I don't think your friends are coming for you "..vo:character_name() .. "!",
							"Looking for offers on this dickhead, " .. vo:character_name() .. ". If not we'll kill him!",
							"Let's see if we can extract information from this lowlife."
			}			
		end
		
		local msg = Tbl[math.random(#Tbl)]
		self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
		
		return true
	end
	
	self.spammer.show_about_kill_wounded = self.spammer.show_about_kill_wounded + 1 
	if (self.spammer.show_about_kill_wounded  > 10) then
		self.spammer.show_about_kill_wounded  = 0
	end
end 

----------------------------------- helpers
function DynamicNewsManager:BuildSentenceStalkerEnemy(victim,who,mn,mx)
	local comm_victim = victim:character_community()
	local comm_who = who:character_community()
	local comm, dist
	local c = 0
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			st = db.storage[db.OnlineStalkers[i]]
			npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				local comm = npc:character_community()
				if (comm == comm_who) then
					dist = victim:position():distance_to(npc:position())
					if (dist < mx) or (dist > mn) then 
						c = c + 1
					end
				end
			end 
		end
		if (c >= 2) then 
			break 
		end
	end

	local EnemyWord = {"We're under fire from","We're taking fire from","We're under attack by","We're getting shot at by"}

	if (c >= 2) then 
		return EnemyWord[math.random(#EnemyWord)], dynamic_news_helper.GetCommunityDescription(who,math.random(9,10))
	end

	return EnemyWord[math.random(#EnemyWord)], dynamic_news_helper.GetCommunityDescription(who,math.random(7,8))
end