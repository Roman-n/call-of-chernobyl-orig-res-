feature_is_active = nil
local display_cnt, cnt, cnt2 = {10,20,50,100}, 2, 2
local rank_spots
local _tmr
local gates, stashes, stashes_opened

-- Callback main_menu_on_keyboard
local function on_key_press(dik)
	if (has_alife_info("ui_pda_hide")) then
		return
	end

	if (dik == DIK_keys.DIK_LCONTROL) then
		if gates then
			unhide_fast_travel()
		else
			hide_fast_travel()
		end
	end
	
	if (dik == DIK_keys.DIK_LSHIFT) then
		if stashes == nil then
			show_stash()
		else
			hide_stash()
		end
	end

	if (dik == DIK_keys.DIK_LMENU) then
		if stashes_opened == nil then
			show_stash_opened()
		else
			hide_stash_opened()
		end
	end

	if (dik == DIK_keys.DIK_RCONTROL) then
		if cnt == #display_cnt then
			cnt = 1
		else
			cnt = cnt + 1
		end
		clear_rank_spots()
	elseif (dik == DIK_keys.DIK_RSHIFT) then
		if cnt == 1 then
			cnt = #display_cnt
		else
			cnt = cnt - 1
		end
		clear_rank_spots()
	end
end

local function main_loop()
	if (has_alife_info("ui_pda_hide")) then
--		if stashes then	hide_stash() end
--		if rank_spots then clear_rank_spots() end
		return false
	end
	
	if rank_spots == nil then
		rank_spots = {}
		for k,v in pairs(pda.coc_ranking_list) do 
			rank_spots[k] = v
		end
		return false
	end
	
	local tg = time_global()
	if (_tmr and tg < _tmr) then 
		return false 
	end
	_tmr = tg + 1000
	
	if not (db.actor) then
		return false
	end
	
	set_rank_spots()
	
	return false
end

function on_game_start()
	if not (DEV_DEBUG) then 
		return 
	end
	if (axr_main.config:r_value("mm_options","enable_debug_map_hud",1,false) == true) then
		activate_feature()
	end
end

function activate_feature()
	if (feature_is_active) then
		return 
	end
	feature_is_active = true
	
	RegisterScriptCallback("on_key_press",on_key_press)
	AddUniqueCall(main_loop)
	
end
	
function deactivate_feature()
	if not (feature_is_active) then
		return 
	end
	feature_is_active = false
	if stashes then
		hide_stash()
	end
	RemoveUniqueCall(main_loop)	
	gates = nil
	rank_spots = nil
	UnregisterScriptCallback("on_key_press",on_key_press)
end

function set_rank_spots()
	local sim = alife()
	for i=1,display_cnt[cnt] do
		local se_obj = sim:object(rank_spots[i])
		if rank_spots[i] ~= 0 and se_obj and IsStalker(nil,se_obj:clsid()) and se_obj:alive() and (level.map_has_object_spot(rank_spots[i],"explo_location")==0) then
			level.map_add_object_spot(rank_spots[i],"explo_location",se_obj:character_name().." ("..se_obj:community()..")")
		end
	end
	cnt2 = cnt
end

function clear_rank_spots()
	for i=1,display_cnt[cnt2] do
		if (level.map_has_object_spot(rank_spots[i],"explo_location")~=0) then
			level.map_remove_object_spot(rank_spots[i], "explo_location")
		end
	end
end

function show_stash()
		--show all filled caches
	if stashes then return end
	for id,v in pairs(coc_treasure_manager.caches) do
		if (type(v) == "string") then
			level.map_add_object_spot_ser(id, "treasure_all", v)
		end
	end
	stashes = true
end

function hide_stash()
		--hide all filled caches
	if stashes == nil then return end
	for i=1,65534 do
		if (level.map_has_object_spot(i, "treasure_all") ~= 0) then
			level.map_remove_object_spot(i, "treasure_all")
		end
	end
	
--	for id,v in pairs(coc_treasure_manager.caches) do
--		if (type(v) == "string") then
--			level.map_remove_object_spot(id, "treasure_all")
--		end
--	end
	stashes = nil
end

function show_stash_opened()
		--show all opened caches
	if stashes_opened then return end
	local sim = alife()
	local caches = coc_treasure_manager.caches
	for i=1,65534 do
		local se_obj = sim:object(i)
		if (se_obj) then
			local parent_id = se_obj.parent_id
			if parent_id and caches[parent_id] == true then
				if stashes_opened == nil then stashes_opened = {} end
				if stashes_opened[parent_id] == nil then stashes_opened[parent_id] = "" end
				stashes_opened[parent_id] = stashes_opened[parent_id] .. " " .. se_obj:section_name()
			end
		end
	end
	if stashes_opened then
		--alun_utils.print_table(stashes_opened, "previously opened unlooted stashes")
		for id, v in pairs(stashes_opened) do
			if (level.map_has_object_spot(id, "treasure_all_opened") == 0) then
				level.map_add_object_spot_ser(id, "treasure_all_opened", v)
			end
		end
	else
		printf("No opened stashes")
	end
end

function hide_stash_opened()
		--hide all opened caches
	if stashes_opened == nil then return end
	for i=1,65534 do
		if (level.map_has_object_spot(i, "treasure_all_opened") ~= 0) then
			level.map_remove_object_spot(i, "treasure_all_opened")
		end
	end
	stashes_opened = nil
end

function hide_fast_travel()
	local size = 0
	gates = {}
	for i=1,65534 do
		if (level.map_has_object_spot(i, "fast_travel") ~= 0) then
			size = size + 1
			level.map_remove_object_spot(i, "fast_travel")
			gates[size] = i
		end
	end
end

function unhide_fast_travel()
	for i=1, #gates do
		if (level.map_has_object_spot(gates[i], "fast_travel") == 0) then 
			level.map_add_object_spot(gates[i], "fast_travel", "st_pda_fast_travel")
		end
	end
	gates = nil
end
